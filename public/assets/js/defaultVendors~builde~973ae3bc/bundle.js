(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["defaultVendors~builde~973ae3bc"],{

/***/ "../node_modules/angular-tree-control/angular-tree-control.js":
/*!********************************************************************!*\
  !*** ../node_modules/angular-tree-control/angular-tree-control.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* commonjs package manager support (eg componentjs) */\nif ( true && module.exports === exports) {\n    module.exports = 'treeControl';\n}\n(function (angular) {\n    'use strict';\n\n    function createPath(startScope) {\n        return function path() {\n            var _path = [];\n            var scope = startScope;\n            var prevNode;\n            while (scope && scope.node !== startScope.synteticRoot) {\n                if (prevNode !== scope.node) _path.push(scope.node);\n                prevNode = scope.node;\n                scope = scope.$parent;\n            }\n            return _path;\n        };\n    }\n\n    function ensureDefault(obj, prop, value) {\n        if (!obj.hasOwnProperty(prop)) obj[prop] = value;\n    }\n\n    function defaultIsLeaf(node, $scope) {\n        return !node[$scope.options.nodeChildren] || node[$scope.options.nodeChildren].length === 0;\n    }\n\n    function shallowCopy(src, dst) {\n        if (angular.isArray(src)) {\n            dst = dst || [];\n\n            for (var i = 0; i < src.length; i++) {\n                dst[i] = src[i];\n            }\n        } else if (angular.isObject(src)) {\n            dst = dst || {};\n\n            for (var key in src) {\n                if (hasOwnProperty.call(src, key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {\n                    dst[key] = src[key];\n                }\n            }\n        }\n\n        return dst || src;\n    }\n    function defaultEquality(a, b, $scope) {\n        if (!a || !b) return false;\n        a = shallowCopy(a);\n        a[$scope.options.nodeChildren] = [];\n        b = shallowCopy(b);\n        b[$scope.options.nodeChildren] = [];\n        return angular.equals(a, b);\n    }\n\n    function defaultIsSelectable() {\n        return true;\n    }\n\n    function ensureAllDefaultOptions($scope) {\n        ensureDefault($scope.options, \"multiSelection\", false);\n        ensureDefault($scope.options, \"nodeChildren\", \"children\");\n        ensureDefault($scope.options, \"dirSelectable\", \"true\");\n        ensureDefault($scope.options, \"injectClasses\", {});\n        ensureDefault($scope.options.injectClasses, \"ul\", \"\");\n        ensureDefault($scope.options.injectClasses, \"li\", \"\");\n        ensureDefault($scope.options.injectClasses, \"liSelected\", \"\");\n        ensureDefault($scope.options.injectClasses, \"iExpanded\", \"\");\n        ensureDefault($scope.options.injectClasses, \"iCollapsed\", \"\");\n        ensureDefault($scope.options.injectClasses, \"iLeaf\", \"\");\n        ensureDefault($scope.options.injectClasses, \"label\", \"\");\n        ensureDefault($scope.options.injectClasses, \"labelSelected\", \"\");\n        ensureDefault($scope.options, \"equality\", defaultEquality);\n        ensureDefault($scope.options, \"isLeaf\", defaultIsLeaf);\n        ensureDefault($scope.options, \"allowDeselect\", true);\n        ensureDefault($scope.options, \"isSelectable\", defaultIsSelectable);\n    }\n\n    angular.module('treeControl', ['contextMenu']).constant('treeConfig', {\n        templateUrl: null\n    }).directive('treecontrol', ['$compile', function ($compile) {\n        /**\n         * @param cssClass - the css class\n         * @param addClassProperty - should we wrap the class name with class=\"\"\n         */\n        function classIfDefined(cssClass, addClassProperty) {\n            if (cssClass) {\n                if (addClassProperty) return 'class=\"' + cssClass + '\"';else return cssClass;\n            } else return \"\";\n        }\n        return {\n            restrict: 'EA',\n            require: \"treecontrol\",\n            transclude: true,\n            scope: {\n                treeModel: \"=\",\n                selectedNode: \"=?\",\n                selectedNodes: \"=?\",\n                expandedNodes: \"=?\",\n                onSelection: \"&\",\n                onNodeToggle: \"&\",\n                onRightClick: \"&\",\n                menuId: \"@\",\n                options: \"=?\",\n                orderBy: \"=?\",\n                reverseOrder: \"@\",\n                filterExpression: \"=?\",\n                filterComparator: \"=?\"\n            },\n            controller: ['$scope', '$templateCache', '$interpolate', 'treeConfig', function ($scope, $templateCache, $interpolate, treeConfig) {\n\n                $scope.options = $scope.options || {};\n\n                ensureAllDefaultOptions($scope);\n\n                $scope.selectedNodes = $scope.selectedNodes || [];\n                $scope.expandedNodes = $scope.expandedNodes || [];\n                $scope.expandedNodesMap = {};\n                for (var i = 0; i < $scope.expandedNodes.length; i++) {\n                    $scope.expandedNodesMap[\"a\" + i] = $scope.expandedNodes[i];\n                }\n                $scope.parentScopeOfTree = $scope.$parent;\n\n                function isSelectedNode(node) {\n                    if (!$scope.options.multiSelection && $scope.options.equality(node, $scope.selectedNode, $scope)) return true;else if ($scope.options.multiSelection && $scope.selectedNodes) {\n                        for (var i = 0; i < $scope.selectedNodes.length; i++) {\n                            if ($scope.options.equality(node, $scope.selectedNodes[i], $scope)) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    }\n                }\n\n                $scope.headClass = function (node) {\n                    var liSelectionClass = classIfDefined($scope.options.injectClasses.liSelected, false);\n                    var injectSelectionClass = \"\";\n                    if (liSelectionClass && isSelectedNode(node)) injectSelectionClass = \" \" + liSelectionClass;\n                    if ($scope.options.isLeaf(node, $scope)) return \"tree-leaf\" + injectSelectionClass;\n                    if ($scope.expandedNodesMap[this.$id]) return \"tree-expanded\" + injectSelectionClass;else return \"tree-collapsed\" + injectSelectionClass;\n                };\n\n                $scope.iBranchClass = function () {\n                    if ($scope.expandedNodesMap[this.$id]) return classIfDefined($scope.options.injectClasses.iExpanded);else return classIfDefined($scope.options.injectClasses.iCollapsed);\n                };\n\n                $scope.nodeExpanded = function () {\n                    return !!$scope.expandedNodesMap[this.$id];\n                };\n\n                $scope.selectNodeHead = function () {\n                    var transcludedScope = this;\n                    var expanding = $scope.expandedNodesMap[transcludedScope.$id] === undefined;\n                    $scope.expandedNodesMap[transcludedScope.$id] = expanding ? transcludedScope.node : undefined;\n                    if (expanding) {\n                        $scope.expandedNodes.push(transcludedScope.node);\n                    } else {\n                        var index;\n                        for (var i = 0; i < $scope.expandedNodes.length && !index; i++) {\n                            if ($scope.options.equality($scope.expandedNodes[i], transcludedScope.node, $scope)) {\n                                index = i;\n                            }\n                        }\n                        if (index !== undefined) $scope.expandedNodes.splice(index, 1);\n                    }\n                    if ($scope.onNodeToggle) {\n                        var parentNode = transcludedScope.$parent.node === transcludedScope.synteticRoot ? null : transcludedScope.$parent.node;\n                        var path = createPath(transcludedScope);\n                        $scope.onNodeToggle({ node: transcludedScope.node, $parentNode: parentNode, $path: path,\n                            $index: transcludedScope.$index, $first: transcludedScope.$first, $middle: transcludedScope.$middle,\n                            $last: transcludedScope.$last, $odd: transcludedScope.$odd, $even: transcludedScope.$even, expanded: expanding });\n                    }\n                };\n\n                $scope.selectNodeLabel = function (selectedNode) {\n                    var transcludedScope = this;\n                    if (!$scope.options.isLeaf(selectedNode, $scope) && (!$scope.options.dirSelectable || !$scope.options.isSelectable(selectedNode))) {\n                        // Branch node is not selectable, expand\n                        this.selectNodeHead();\n                    } else if ($scope.options.isLeaf(selectedNode, $scope) && !$scope.options.isSelectable(selectedNode)) {\n                        // Leaf node is not selectable\n                        return;\n                    } else {\n                        var selected = false;\n                        if ($scope.options.multiSelection) {\n                            var pos = -1;\n                            for (var i = 0; i < $scope.selectedNodes.length; i++) {\n                                if ($scope.options.equality(selectedNode, $scope.selectedNodes[i], $scope)) {\n                                    pos = i;\n                                    break;\n                                }\n                            }\n                            if (pos === -1) {\n                                $scope.selectedNodes.push(selectedNode);\n                                selected = true;\n                            } else {\n                                $scope.selectedNodes.splice(pos, 1);\n                            }\n                        } else {\n                            if (!$scope.options.equality(selectedNode, $scope.selectedNode, $scope)) {\n                                $scope.selectedNode = selectedNode;\n                                selected = true;\n                            } else {\n                                if ($scope.options.allowDeselect) {\n                                    $scope.selectedNode = undefined;\n                                } else {\n                                    $scope.selectedNode = selectedNode;\n                                    selected = true;\n                                }\n                            }\n                        }\n                        if ($scope.onSelection) {\n                            var parentNode = transcludedScope.$parent.node === transcludedScope.synteticRoot ? null : transcludedScope.$parent.node;\n                            var path = createPath(transcludedScope);\n                            $scope.onSelection({ node: selectedNode, selected: selected, $parentNode: parentNode, $path: path,\n                                $index: transcludedScope.$index, $first: transcludedScope.$first, $middle: transcludedScope.$middle,\n                                $last: transcludedScope.$last, $odd: transcludedScope.$odd, $even: transcludedScope.$even });\n                        }\n                    }\n                };\n\n                $scope.rightClickNodeLabel = function (targetNode, $event) {\n\n                    // Is there a right click function??\n                    if ($scope.onRightClick) {\n\n                        // Turn off the browser default context-menu\n                        if ($event) $event.preventDefault();\n\n                        // Are are we changing the 'selected' node (as well)?\n                        if ($scope.selectedNode != targetNode) {\n                            this.selectNodeLabel(targetNode);\n                        }\n\n                        // Finally go do what they asked\n                        $scope.onRightClick({ node: targetNode });\n                    }\n                };\n\n                $scope.selectedClass = function () {\n                    var isThisNodeSelected = isSelectedNode(this.node);\n                    var labelSelectionClass = classIfDefined($scope.options.injectClasses.labelSelected, false);\n                    var injectSelectionClass = \"\";\n                    if (labelSelectionClass && isThisNodeSelected) injectSelectionClass = \" \" + labelSelectionClass;\n\n                    return isThisNodeSelected ? \"tree-selected\" + injectSelectionClass : \"\";\n                };\n\n                $scope.unselectableClass = function () {\n                    var isThisNodeUnselectable = !$scope.options.isSelectable(this.node);\n                    var labelUnselectableClass = classIfDefined($scope.options.injectClasses.labelUnselectable, false);\n                    return isThisNodeUnselectable ? \"tree-unselectable \" + labelUnselectableClass : \"\";\n                };\n\n                //tree template\n                var rcLabel = $scope.onRightClick ? ' tree-right-click=\"rightClickNodeLabel(node)\"' : '';\n                var ctxMenuId = $scope.menuId ? ' context-menu-id=\"' + $scope.menuId + '\"' : '';\n\n                $scope.isReverse = function () {\n                    return !($scope.reverseOrder === 'false' || $scope.reverseOrder === 'False' || $scope.reverseOrder === '' || $scope.reverseOrder === false);\n                };\n\n                $scope.orderByFunc = function () {\n                    return $scope.orderBy;\n                };\n\n                var templateOptions = {\n                    orderBy: $scope.orderBy ? \" | orderBy:orderByFunc():isReverse()\" : '',\n                    ulClass: classIfDefined($scope.options.injectClasses.ul, true),\n                    nodeChildren: $scope.options.nodeChildren,\n                    liClass: classIfDefined($scope.options.injectClasses.li, true),\n                    iLeafClass: classIfDefined($scope.options.injectClasses.iLeaf, false),\n                    labelClass: classIfDefined($scope.options.injectClasses.label, false)\n                };\n\n                var template;\n                var templateUrl = $scope.options.templateUrl || treeConfig.templateUrl;\n\n                if (templateUrl) {\n                    template = $templateCache.get(templateUrl);\n                }\n\n                if (!template) {\n                    template = '<ul {{options.ulClass}} >' + '<li ng-repeat=\"node in node.{{options.nodeChildren}} | filter:filterExpression:filterComparator {{options.orderBy}}\" ng-class=\"headClass(node)\" {{options.liClass}}' + 'set-node-to-data>' + '<i class=\"tree-branch-head\" ng-class=\"iBranchClass()\" ng-click=\"selectNodeHead(node)\"></i>' + '<i class=\"tree-leaf-head {{options.iLeafClass}}\"></i>' + '<div class=\"tree-label {{options.labelClass}}\" ng-class=\"[selectedClass(), unselectableClass()]\" ng-click=\"selectNodeLabel(node)\" ' + rcLabel + ctxMenuId + ' tree-transclude></div>' + '<treeitem ng-if=\"nodeExpanded()\"></treeitem>' + '</li>' + '</ul>';\n                }\n\n                this.template = $compile($interpolate(template)({ options: templateOptions }));\n            }],\n\n            compile: function compile(element, attrs, childTranscludeFn) {\n                return function (scope, element, attrs, treemodelCntr) {\n\n                    scope.$watch(\"treeModel\", function updateNodeOnRootScope(newValue) {\n                        if (angular.isArray(newValue)) {\n                            if (angular.isDefined(scope.node) && angular.equals(scope.node[scope.options.nodeChildren], newValue)) return;\n                            scope.node = {};\n                            scope.synteticRoot = scope.node;\n                            scope.node[scope.options.nodeChildren] = newValue;\n                        } else {\n                            if (angular.equals(scope.node, newValue)) return;\n                            scope.node = newValue;\n                        }\n                    });\n\n                    scope.$watchCollection('expandedNodes', function (newValue, oldValue) {\n                        var notFoundIds = 0;\n                        var newExpandedNodesMap = {};\n                        var $liElements = element.find('li');\n                        var existingScopes = [];\n                        // find all nodes visible on the tree and the scope $id of the scopes including them\n                        angular.forEach($liElements, function (liElement) {\n                            var $liElement = angular.element(liElement);\n                            var liScope = {\n                                $id: $liElement.data('scope-id'),\n                                node: $liElement.data('node')\n                            };\n                            existingScopes.push(liScope);\n                        });\n                        // iterate over the newValue, the new expanded nodes, and for each find it in the existingNodesAndScopes\n                        // if found, add the mapping $id -> node into newExpandedNodesMap\n                        // if not found, add the mapping num -> node into newExpandedNodesMap\n                        angular.forEach(newValue, function (newExNode) {\n                            var found = false;\n                            for (var i = 0; i < existingScopes.length && !found; i++) {\n                                var existingScope = existingScopes[i];\n                                if (scope.options.equality(newExNode, existingScope.node, scope)) {\n                                    newExpandedNodesMap[existingScope.$id] = existingScope.node;\n                                    found = true;\n                                }\n                            }\n                            if (!found) newExpandedNodesMap['a' + notFoundIds++] = newExNode;\n                        });\n                        scope.expandedNodesMap = newExpandedNodesMap;\n                    });\n\n                    //                        scope.$watch('expandedNodesMap', function(newValue) {\n                    //\n                    //                        });\n\n                    //Rendering template for a root node\n                    treemodelCntr.template(scope, function (clone) {\n                        element.html('').append(clone);\n                    });\n                    // save the transclude function from compile (which is not bound to a scope as apposed to the one from link)\n                    // we can fix this to work with the link transclude function with angular 1.2.6. as for angular 1.2.0 we need\n                    // to keep using the compile function\n                    scope.$treeTransclude = childTranscludeFn;\n                };\n            }\n        };\n    }]).directive(\"setNodeToData\", ['$parse', function ($parse) {\n        return {\n            restrict: 'A',\n            link: function link($scope, $element, $attrs) {\n                $element.data('node', $scope.node);\n                $element.data('scope-id', $scope.$id);\n            }\n        };\n    }]).directive('treeRightClick', [\"$parse\", function ($parse) {\n        return function (scope, element, attrs) {\n            var fn = $parse(attrs.treeRightClick);\n            element.bind('contextmenu', function (event) {\n                scope.$apply(function () {\n                    fn(scope, { $event: event }); // go do our stuff\n                });\n            });\n        };\n    }]).directive(\"treeitem\", function () {\n        return {\n            restrict: 'E',\n            require: \"^treecontrol\",\n            link: function link(scope, element, attrs, treemodelCntr) {\n                // Rendering template for the current node\n                treemodelCntr.template(scope, function (clone) {\n                    element.html('').append(clone);\n                });\n            }\n        };\n    }).directive(\"treeTransclude\", function () {\n        return {\n            controller: ['$scope', function ($scope) {\n                ensureAllDefaultOptions($scope);\n            }],\n\n            link: function link(scope, element, attrs, controller) {\n                if (!scope.options.isLeaf(scope.node, scope)) {\n                    angular.forEach(scope.expandedNodesMap, function (node, id) {\n                        if (scope.options.equality(node, scope.node, scope)) {\n                            scope.expandedNodesMap[scope.$id] = scope.node;\n                            scope.expandedNodesMap[id] = undefined;\n                        }\n                    });\n                }\n                if (!scope.options.multiSelection && scope.options.equality(scope.node, scope.selectedNode, scope)) {\n                    scope.selectedNode = scope.node;\n                } else if (scope.options.multiSelection) {\n                    var newSelectedNodes = [];\n                    for (var i = 0; i < scope.selectedNodes.length; i++) {\n                        if (scope.options.equality(scope.node, scope.selectedNodes[i], scope)) {\n                            newSelectedNodes.push(scope.node);\n                        }\n                    }\n                    scope.selectedNodes = newSelectedNodes;\n                }\n\n                // create a scope for the transclusion, whos parent is the parent of the tree control\n                scope.transcludeScope = scope.parentScopeOfTree.$new();\n                scope.transcludeScope.node = scope.node;\n                scope.transcludeScope.$path = createPath(scope);\n                scope.transcludeScope.$parentNode = scope.$parent.node === scope.synteticRoot ? null : scope.$parent.node;\n                scope.transcludeScope.$index = scope.$index;\n                scope.transcludeScope.$first = scope.$first;\n                scope.transcludeScope.$middle = scope.$middle;\n                scope.transcludeScope.$last = scope.$last;\n                scope.transcludeScope.$odd = scope.$odd;\n                scope.transcludeScope.$even = scope.$even;\n                scope.$on('$destroy', function () {\n                    scope.transcludeScope.$destroy();\n                });\n\n                scope.$treeTransclude(scope.transcludeScope, function (clone) {\n                    element.empty();\n                    element.append(clone);\n                });\n            }\n        };\n    });\n})(angular);\n\n//# sourceURL=webpack:///../node_modules/angular-tree-control/angular-tree-control.js?");

/***/ }),

/***/ "../node_modules/angular-tree-control/context-menu.js":
/*!************************************************************!*\
  !*** ../node_modules/angular-tree-control/context-menu.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function (angular) {\n    'use strict';\n\n    /* Figure out page (viewport) dimensions of current page, by\n     * putting an empty DIV in the bottom right, and checking its offset.\n     */\n\n    function getPageDimensions() {\n        var bttmRight = document.createElement(\"div\");\n        bttmRight.setAttribute(\"style\", \"visibility:hidden;position:fixed;bottom:0px;right:0px;\");\n        document.getElementsByTagName(\"body\")[0].appendChild(bttmRight);\n        var pageWidth = bttmRight.offsetLeft;\n        var pageHeight = bttmRight.offsetTop;\n        bttmRight.parentNode.removeChild(bttmRight);\n        return { width: pageWidth, height: pageHeight };\n    }\n\n    angular.module('contextMenu', []).directive('contextMenuId', ['$document', function ($document) {\n\n        return {\n            restrict: 'A',\n            scope: '@&',\n            compile: function compile(tElement, tAttrs, transclude) {\n\n                return {\n                    post: function postLink(scope, iElement, iAttrs, controller) {\n\n                        var ul = angular.element(document.querySelector('#' + iAttrs.contextMenuId));\n\n                        ul.css({ 'display': 'none' });\n\n                        // right-click on context-menu will show the menu\n                        iElement.bind('contextmenu', function showContextMenu(event) {\n\n                            // don't do the normal browser right-click context menu\n                            event.preventDefault();\n\n                            // Organise to show off the menu (in roughly the right place)\n                            ul.css({\n                                visibility: \"hidden\",\n                                position: \"fixed\",\n                                display: \"block\",\n                                left: event.clientX + 'px',\n                                top: event.clientY + 'px'\n                            });\n\n                            var ulDim = { height: ul.prop(\"clientHeight\"),\n                                width: ul.prop(\"cientWidth\")\n                            };\n\n                            var pgDim = getPageDimensions();\n\n                            // will ctxMenu fit on screen (height-wise) ?\n                            // TODO: figure out why we need the fudge-factor of 14\n                            var ulTop = event.clientY + ulDim.height <= pgDim.height - 14 ? event.clientY : pgDim.height - ulDim.height - 14;\n\n                            // will ctxMenu fit on screen (width-wise) ?\n                            var ulLeft = event.clientX + ulDim.width <= pgDim.width - 2 ? event.clientX : pgDim.width - ulDim.width - 2;\n\n                            // Ok, now show it off in the right place\n                            ul.css({\n                                visibility: \"visible\",\n                                position: \"fixed\",\n                                display: \"block\",\n                                left: ulLeft + 'px',\n                                top: ulTop + 'px'\n                            });\n\n                            // setup a one-time click event on the document to hide the dropdown-menu\n                            $document.one('click', function hideContextMenu(event) {\n                                ul.css({\n                                    'display': 'none'\n                                });\n                            });\n                        });\n                    }\n                };\n            }\n        };\n    }]).directive('contextSubmenuId', ['$document', function ($document) {\n        return {\n            restrict: 'A',\n            scope: '@&',\n            compile: function compile(tElement, tAttrs, transclude) {\n                return {\n                    post: function postLink(scope, iElement, iAttrs, controller) {\n\n                        var ul = angular.element(document.querySelector('#' + iAttrs.contextSubmenuId));\n\n                        ul.css({ 'display': 'none' });\n\n                        iElement.bind('mouseover', function showSubContextMenu(event) {\n                            // use CSS to move and show the sub dropdown-menu\n                            if (ul.css(\"display\") == 'none') {\n\n                                // Organise to show off the sub-menu (in roughly the right place)\n                                ul.css({\n                                    visibility: \"hidden\",\n                                    position: \"fixed\",\n                                    display: \"block\",\n                                    left: event.clientX + 'px',\n                                    top: event.clientY + 'px'\n                                });\n\n                                var ulDim = { height: ul.prop(\"clientHeight\"),\n                                    width: ul.prop(\"clientWidth\")\n                                };\n\n                                var pgDim = getPageDimensions();\n\n                                // Will ctxSubMenu fit (height-wise) ?\n                                // TODO: figure out why we need the fudge-factor of 14\n                                var ulTop = event.clientY + ulDim.height <= pgDim.height - 14 ? event.clientY : pgDim.height - ulDim.height - 14;\n\n                                // Will ctxSubMenu fit (on the right of parent menu) ?\n                                var ulLeft = event.target.offsetParent.offsetLeft + event.target.clientWidth + ulDim.width < pgDim.width ? event.target.offsetParent.offsetLeft + event.target.clientWidth : event.target.offsetParent.offsetLeft - ulDim.width;\n\n                                // OK, now show it off in the right place\n                                ul.css({\n                                    visibility: \"visible\",\n                                    position: \"fixed\",\n                                    display: \"block\",\n                                    left: ulLeft + 'px',\n                                    top: ulTop + 'px'\n                                });\n\n                                // Each uncle/aunt menu item needs a mouseover event to make the subContext menu disappear\n                                angular.forEach(iElement[0].parentElement.parentElement.children, function (child, ndx) {\n                                    if (child !== iElement[0].parentElement) {\n                                        angular.element(child).one('mouseover', function (event) {\n                                            if (ul.css(\"display\") == 'block') {\n                                                ul.css({\n                                                    'display': 'none'\n                                                });\n                                            }\n                                        });\n                                    }\n                                });\n                            }\n\n                            // setup a one-time click event on the document to hide the sub dropdown-menu\n                            $document.one('click', function hideContextMenu(event) {\n                                if (ul.css(\"display\") == 'block') {\n                                    ul.css({\n                                        'display': 'none'\n                                    });\n                                }\n                            });\n                        });\n                    }\n                };\n            }\n        };\n    }]);\n})(angular);\n\n//# sourceURL=webpack:///../node_modules/angular-tree-control/context-menu.js?");

/***/ }),

/***/ "../node_modules/mustache/mustache.js":
/*!********************************************!*\
  !*** ../node_modules/mustache/mustache.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\n/*global define: false Mustache: true*/\n\n(function defineMustache(global, factory) {\n  if (( false ? undefined : _typeof(exports)) === 'object' && exports && typeof exports.nodeName !== 'string') {\n    factory(exports); // CommonJS\n  } else if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD\n  } else {}\n})(undefined, function mustacheFactory(mustache) {\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill(object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr(obj) {\n    return isArray(obj) ? 'array' : typeof obj === 'undefined' ? 'undefined' : _typeof(obj);\n  }\n\n  function escapeRegExp(string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty(obj, propName) {\n    return obj != null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && propName in obj;\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp(re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace(string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap(s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   */\n  function parseTemplate(template, tags) {\n    if (!template) return [];\n\n    var sections = []; // Stack to hold section tokens\n    var tokens = []; // Buffer to hold the tokens\n    var spaces = []; // Indices of whitespace tokens on the current line\n    var hasTag = false; // Is there a {{tag}} on the current line?\n    var nonSpace = false; // Is there a non-space char on the current line?\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace() {\n      if (hasTag && !nonSpace) {\n        while (spaces.length) {\n          delete tokens[spaces.pop()];\n        }\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags(tagsToCompile) {\n      if (typeof tagsToCompile === 'string') tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2) throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n          } else {\n            nonSpace = true;\n          }\n\n          tokens.push(['text', chr, start, start + 1]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') stripSpace();\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe)) break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe)) throw new Error('Unclosed tag at ' + scanner.pos);\n\n      token = [type, value, start, scanner.pos];\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection) throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection) throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens(tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens(tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner(string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos() {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan(re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0) return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil(re) {\n    var index = this.tail.search(re),\n        match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context(view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push(view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup(name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this,\n          names,\n          index,\n          lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          value = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           **/\n          while (value != null && index < names.length) {\n            if (index === names.length - 1) lookupHit = hasProperty(value, names[index]);\n\n            value = value[names[index++]];\n          }\n        } else {\n          value = context.view[name];\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) break;\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value)) value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer() {\n    this.cache = {};\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache() {\n    this.cache = {};\n  };\n\n  /**\n   * Parses and caches the given `template` and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse(template, tags) {\n    var cache = this.cache;\n    var tokens = cache[template];\n\n    if (tokens == null) tokens = cache[template] = parseTemplate(template, tags);\n\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   */\n  Writer.prototype.render = function render(template, view, partials) {\n    var tokens = this.parse(template);\n    var context = view instanceof Context ? view : new Context(view);\n    return this.renderTokens(tokens, context, partials, template);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);else if (symbol === '&') value = this.unescapedValue(token, context);else if (symbol === 'name') value = this.escapedValue(token, context);else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined) buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender(template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string') throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null) buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || isArray(value) && value.length === 0) return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.renderPartial = function renderPartial(token, context, partials) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) return this.renderTokens(this.parse(value), context, partials, value);\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null) return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue(token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null) return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue(token) {\n    return token[1];\n  };\n\n  mustache.name = 'mustache.js';\n  mustache.version = '2.3.2';\n  mustache.tags = ['{{', '}}'];\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache() {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse(template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer.\n   */\n  mustache.render = function render(template, view, partials) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' + 'but \"' + typeStr(template) + '\" was given as the first ' + 'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials);\n  };\n\n  // This is here for backwards compatibility with 0.4.x.,\n  /*eslint-disable */ // eslint wants camel cased function name\n  mustache.to_html = function to_html(template, view, partials, send) {\n    /*eslint-enable*/\n\n    var result = mustache.render(template, view, partials);\n\n    if (isFunction(send)) {\n      send(result);\n    } else {\n      return result;\n    }\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n});\n\n//# sourceURL=webpack:///../node_modules/mustache/mustache.js?");

/***/ })

}]);